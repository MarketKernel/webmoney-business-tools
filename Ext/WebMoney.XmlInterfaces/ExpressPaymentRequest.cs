using System;
using System.Globalization;
using System.Net.Mail;
using System.Threading;
using WebMoney.XmlInterfaces.BasicObjects;
using WebMoney.XmlInterfaces.Core;
using WebMoney.XmlInterfaces.Responses;

namespace WebMoney.XmlInterfaces
{
    /// <summary>
    /// X20 interface. Making transactions through the merchant.webmoney service without leaving the seller's site (resource, service, application).
    /// </summary>
#if DEBUG
#else
    [System.Diagnostics.DebuggerNonUserCode]
#endif
    [Serializable]
    public class ExpressPaymentRequest : WmRequest<ExpressPaymentResponse>
    {
        private CultureInfo _culture;
        private int _orderId;

        protected override string ClassicUrl => "https://merchant.webmoney.ru/conf/xml/XMLTransRequest.asp";

        protected override string LightUrl => throw new NotSupportedException();

        /// <summary>
        /// WM purse of the payment recipient. The number of a purse registered and configured in the merchant.webmoney service that the seller will receive payments to.
        /// </summary>
        public Purse StorePurse { get; set; }

        /// <summary>
        /// Payment number. The integer number of the payment in the seller's accounting system that must be generated by the seller's application.
        /// This parameter is completely identical (even has the same name) to the parameter passed to the merchant.wmtransfer.com service from the payment form and taken from the lmi_payment_no hidden input field.
        /// Note that if the merchant.wmtransfer.com service is not configured to accept unique lmi_payment_no for lmi_payee_purse purses only, it may result in situations when two payments will be made and registered by the seller's accounting system for the same payment number if he/she generates the same lmi_payment_no for different purchases. Make sure that every purchase in the seller's accounting system has a unique lmi_payment_no number.
        /// </summary>
        public int OrderId
        {
            get => _orderId;
            set
            {
                if (value < 0)
                    throw new ArgumentOutOfRangeException(nameof(value));

                _orderId = value;
            }
        }

        /// <summary>
        /// Payment amount. The payment amount that the seller wants to receive from the buyer in the same currency as used by the seller's lmi_payee_purse purse.
        /// </summary>
        public Amount Amount { get; set; }

        /// <summary>
        /// Payment purpose. Description of a product or service specified by the seller. If present, it's added to the payment purpose part of the WebMoney transfer operation. Max size - 255 characters.
        /// </summary>
        public Description Description { get; set; }

        /// <summary>
        /// A mobile number with country and city codes (numbers only, no plus sign, brackets or other characters - e.g 16467659847 for the US).
        /// </summary>
        public Phone ClientPhone { get; set; }

        /// <summary>
        /// Client's WM identifier.
        /// </summary>
        public WmId ClientWmId { get; set; }

        /// <summary>
        /// Client's email address.
        /// </summary>
        public MailAddress ClientEmail { get; set; }

        /// <summary>
        /// The type of data sent in the lmi_clientnumber parameter.
        /// </summary>
        public ClientIdType ClientIdType { get; }

        /// <summary>
        /// This field defines the type of transaction confirmation. If the value is 1, an SMS message will be sent to the client. If the value is 2, the client will receive a USSD request. If the value is 3, the system will attempt to automatically determine (based on the client's settings and analysis of previous purchases) the preferred method (SMS will be chosen as the default method if this attempt fails). If the value is 4, neither an SMS message nor a USSD request is sent and the system generates an invoice that can be settled through a mobile or any other WebMoney application.
        /// In this case, however, the WebMoney Check payment option will not be available, as it requires validation by an SMS code. Please note that regardless of the value of this parameter (from 1 to 4), if the interface determines that the payment will be made from a WM identifier (not from a WebMoney Check that requires a mobile number), a WM invoice will be generated anyway (the client may not receive an SMS or USSD request (if the interface is called with an SMS confirmation option), but will be able to pay using any mobile purse management application and the payment will go through in a regular manner). 
        /// The thing is that the seller's application may not send a confirmation code (or send a zero value) in the confirmation request or even send any code and the response will return the details of a successful payment. If it is digit 5 then customer will receive sms and WM-invoice is not going to be issued in other words payment would be possible ONLY through (with) x20 and with sms confirmation through x20 interface. The optimal value for all cases is 3.
        /// </summary>
        public ConfirmationType ConfirmationType { get; set; }

        /// <summary>
        /// Response language. This parameter transmits 'ru-RU' or 'en-US' value for Russian and English languages of the interface correspondingly. This value determines both the language in which SMS (USSD) requests are sent to the user and the language in which answers in 'userdec' tag are sent.
        /// </summary>
        public CultureInfo Culture
        {
            get => _culture;
            set => _culture = value ?? throw new ArgumentNullException(nameof(value));
        }

        protected internal ExpressPaymentRequest()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="storePurse">WM purse of the payment recipient.</param>
        /// <param name="orderId">Payment number.</param>
        /// <param name="amount">Payment amount.</param>
        /// <param name="description">Payment purpose.</param>
        /// <param name="clientPhone">A mobile number with country and city codes.</param>
        /// <param name="confirmationType">This field defines the type of transaction confirmation.</param>
        /// <param name="culture">Response language.</param>
        public ExpressPaymentRequest(
            Purse storePurse,
            int orderId,
            Amount amount,
            Description description,
            Phone clientPhone,
            ConfirmationType confirmationType,
            CultureInfo culture = null)
        {
            if (null == culture)
                culture = Thread.CurrentThread.CurrentUICulture;

            if (orderId < 0)
                throw new ArgumentOutOfRangeException(nameof(orderId));

            StorePurse = storePurse;
            OrderId = orderId;
            Amount = amount;
            Description = description;
            ClientPhone = clientPhone;
            ClientIdType = ClientIdType.Phone;
            ConfirmationType = confirmationType;
            Culture = culture;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="storePurse">WM purse of the payment recipient.</param>
        /// <param name="orderId">Payment number.</param>
        /// <param name="amount">Payment amount.</param>
        /// <param name="description">Payment purpose.</param>
        /// <param name="clientWmId">Client's WM identifier.</param>
        /// <param name="confirmationType">This field defines the type of transaction confirmation.</param>
        /// <param name="culture">Response language.</param>
        public ExpressPaymentRequest(
            Purse storePurse,
            int orderId,
            Amount amount,
            Description description,
            WmId clientWmId,
            ConfirmationType confirmationType,
            CultureInfo culture = null)
        {
            if (null == culture)
                culture = Thread.CurrentThread.CurrentUICulture;

            if (orderId < 0)
                throw new ArgumentOutOfRangeException(nameof(orderId));

            StorePurse = storePurse;
            OrderId = orderId;
            Amount = amount;
            Description = description;
            ClientWmId = clientWmId;
            ClientIdType = ClientIdType.WmId;
            ConfirmationType = confirmationType;
            Culture = culture;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="storePurse">WM purse of the payment recipient.</param>
        /// <param name="orderId">Payment number.</param>
        /// <param name="amount">Payment amount.</param>
        /// <param name="description">Payment purpose.</param>
        /// <param name="clientEmail">Client's email address.</param>
        /// <param name="confirmationType">This field defines the type of transaction confirmation.</param>
        /// <param name="culture">Response language.</param>
        public ExpressPaymentRequest(
            Purse storePurse,
            int orderId,
            Amount amount,
            Description description,
            MailAddress clientEmail,
            ConfirmationType confirmationType,
            CultureInfo culture = null)
        {
            if (null == clientEmail)
                throw new ArgumentNullException(nameof(clientEmail));

            if (null == culture)
                culture = Thread.CurrentThread.CurrentUICulture;

            if (orderId < 0)
                throw new ArgumentOutOfRangeException(nameof(orderId));

            StorePurse = storePurse;
            OrderId = orderId;
            Amount = amount;
            Description = description;
            ClientEmail = clientEmail;
            ClientIdType = ClientIdType.Email;
            ConfirmationType = confirmationType;
            Culture = culture;
        }

        protected override string BuildMessage(ulong requestNumber)
        {
            return string.Format(
                CultureInfo.InvariantCulture,
                "{0}{1}{2}{3}{4}",
                Initializer.Id,
                StorePurse,
                OrderId,
                GetClientId(),
                (int)ClientIdType);
        }

        protected override void BuildXmlHead(XmlRequestBuilder xmlRequestBuilder)
        {
            if (null == xmlRequestBuilder)
                throw new ArgumentNullException(nameof(xmlRequestBuilder));

            xmlRequestBuilder.WriteStartDocument();

            xmlRequestBuilder.WriteStartElement("merchant.request"); // <merchant.request>

            xmlRequestBuilder.WriteElement("wmid", Initializer.Id.ToString());

            ulong requestNumber = Initializer.GetRequestNumber();

            switch (Initializer.Mode)
            {
                case AuthorizationMode.Merchant:
                    xmlRequestBuilder.WriteElement(
                        "md5", Utilities.CryptographyUtility.ComputeHash(BuildMessage(requestNumber) + Initializer.SecretKey));
                    break;
                case AuthorizationMode.Classic:
                    xmlRequestBuilder.WriteElement("sign", Initializer.Sign(BuildMessage(requestNumber)));
                    break;
                default:
                    throw new InvalidOperationException("Initializer.Mode=" + Initializer.Mode);
            }
        }

        protected override void BuildXmlBody(XmlRequestBuilder xmlRequestBuilder)
        {
            if (null == xmlRequestBuilder)
                throw new ArgumentNullException(nameof(xmlRequestBuilder));

            xmlRequestBuilder.WriteElement("lmi_payee_purse", StorePurse.ToString());
            xmlRequestBuilder.WriteElement("lmi_payment_no", OrderId);
            xmlRequestBuilder.WriteElement("lmi_payment_amount", Amount.ToString());
            xmlRequestBuilder.WriteElement("lmi_payment_desc", Description);
            xmlRequestBuilder.WriteElement("lmi_clientnumber", GetClientId());
            xmlRequestBuilder.WriteElement("lmi_clientnumber_type", (int)ClientIdType);
            xmlRequestBuilder.WriteElement("lmi_sms_type", (int)ConfirmationType);
            xmlRequestBuilder.WriteElement("lang", Culture.Name);
        }

        protected override void BuildXmlFoot(XmlRequestBuilder xmlRequestBuilder)
        {
            if (null == xmlRequestBuilder)
                throw new ArgumentNullException(nameof(xmlRequestBuilder));

            xmlRequestBuilder.WriteEndElement(); // </merchant.request>

            xmlRequestBuilder.WriteEndDocument();
        }

        private string GetClientId()
        {
            string clientId;

            switch (ClientIdType)
            {
                case ClientIdType.Phone:
                    clientId = ClientPhone.ToString().Remove(0, 1);
                    break;
                case ClientIdType.WmId:
                    clientId = ClientWmId.ToString();
                    break;
                case ClientIdType.Email:
                    clientId = ClientEmail.Address;
                    break;
                default:
                    throw new InvalidOperationException("ClientIdType=" + ClientIdType);
            }

            return clientId;
        }
    }
}
